O arquivo `editor.css` define toda a aparência da extensão, empregando técnicas modernas de CSS para uma interface flexível e customizável.

*   **Temas com Variáveis CSS:** Utiliza variáveis CSS (ex: `--primary-color`) para alternar temas (Claro, Escuro, Floresta, etc.) de forma eficiente, modificando os valores dessas variáveis em classes específicas (ex: `.dark-mode`).
*   **Design Responsivo e Flexível:** Usa Flexbox para organizar elementos da barra de ferramentas e modais, garantindo adaptação a diferentes contextos.
*   **Estilização Detalhada de Componentes:** Define estilos específicos para:
    *   Editor e Toolbar: Bordas, cores e espaçamentos.
    *   Modais (`.editor-modal`, `.se-modal-content`): Sistema robusto com cabeçalho, corpo e rodapé.
    *   Dropdowns e Pickers: Menus suspensos e seletores de emoji/cor contextuais.
    *   Listas (Trâmites, Categorias): Estilos de itens, incluindo feedback visual para drag-and-drop.
    *   Notificações (Toasts): Alertas para feedback ao usuário.
*   **Animações e Transições:** Emprega transições sutis (transition) e animações (@keyframes) para feedback visual (ex: hover de botões, carregamento de IA, abertura de modais), tornando a interface mais fluida.
*   **Painel Lateral de Anotações:** Estilos específicos para o painel (#notes-side-panel), controlando visibilidade, posição e aparência.

Cada arquivo .js possui uma responsabilidade bem definida, promovendo organização e manutenibilidade.

*   `config.js`: Arquivo de configuração central, definindo constantes como chaves de armazenamento (`STORAGE\_KEY`), seletores CSS do textarea do SGD, lista de temas e configurações padrão.
*   `main.js`: Ponto de entrada da extensão. Inicializa a extensão, observando a página do SGD, injetando a barra de ferramentas, carregando o tema salvo e configurando listeners de eventos.
*   `editor-core.js`: Lógica central do editor de texto, incluindo funções como `insertAtCursor` e `applyFormatting`, além da sincronização entre o textarea e o painel de visualização.
*   `features.js`: Implementa funcionalidades complexas, como atalhos de teclado para trâmites, inserção de itens especiais e integração com serviços de IA (`handleAICorrection`, `handleAISummary`).
*   `quick-messages.js`: Gerencia a funcionalidade de "Trâmites Rápidos", incluindo carregamento de categorias e mensagens, criação de modais para adicionar/editar trâmites e lógica de drag-and-drop.
*   `ui-components.js`: Biblioteca de componentes de interface, com funções para criar modais genéricos (`createModal`), notificações (`showNotification`), diálogos de confirmação e seletores de cor/emoji. Gerencia o painel lateral de anotações.
*   `storage.js`: Abstração para o `chrome.storage`, lidando com leitura e gravação de dados (trâmites, configurações, tema, anotações). Inclui `runDataMigration` para atualizar a estrutura de dados em novas versões.
*   `ai-service.js`: Responsável pela comunicação com a API do Google Gemini, formatando requisições (prompts) e processando respostas para funcionalidades de IA.
*   `service-worker.js`: Roda em segundo plano, gerenciando alarms para lembretes e realizando análise periódica do uso de texto para sugerir trâmites.
*   `utils.js`: Arquivo de utilidades, contendo funções auxiliares como `escapeHTML`, `getTargetTextArea` e `extractPageContentForAI`.